;; -*- mode: common-lisp; coding: utf-8 -*-
(in-package :nstores)

(defparameter *invoice-settings-alist*
  '((invoice-print-settings.default-paper-size . "A4")
    (invoice-print-settings.orientation . "portrait")
    (invoice-print-settings.font-size . 12)
    (invoice-print-settings.margin.top . "1cm")
    (invoice-print-settings.margin.bottom . "1cm")
    (invoice-print-settings.margin.left . "1cm")
    (invoice-print-settings.margin.right . "1cm")
    (invoice-print-settings.header.enable . t)
    (invoice-print-settings.header.text . "Company Name - Invoice")
    (invoice-print-settings.header.logo-path . "/assets/logo.png")
    (invoice-print-settings.footer.enable . t)
    (invoice-print-settings.footer.text . "Thank you for your business!")
    (invoice-print-settings.watermark.enable . nil)
    (invoice-print-settings.watermark.text . "")
    (invoice-general-settings.invoice-number-format . "INV-YYYY-MM-{counter}")
    (invoice-general-settings.default-currency . "USD")
    (invoice-general-settings.date-format . "MM/DD/YYYY")
    (invoice-general-settings.time-zone . "America/New_York")
    (invoice-general-settings.enable-terms-and-conditions . t)
    (invoice-general-settings.default-terms-and-conditions . "All sales are final. No refunds.")
    (invoice-general-settings.enable-discounts . t)
    (invoice-general-settings.default-discount-rate . 5)))

(defparameter *invoice-settings*
  '((invoice-print-settings
      (default-paper-size "A4")
      (orientation "portrait")
      (font-size 12)
      (margin
        (top "1cm")
        (bottom "1cm")
        (left "1cm")
        (right "1cm"))
      (header
        (enable t)
        (text "Company Name - Invoice")
        (logo-path "/assets/logo.png"))
      (footer
        (enable t)
        (text "Thank you for your business!"))
      (watermark
        (enable nil)
        (text "")))

    (invoice-general-settings
      (invoice-number-format "INV-YYYY-MM-{counter}")
      (default-currency "USD")
      (date-format "MM/DD/YYYY")
      (time-zone "America/New_York")
      (enable-terms-and-conditions t)
      (default-terms-and-conditions "All sales are final. No refunds.")
      (enable-discounts t)
      (default-discount-rate 5))

    (invoice-email-settings
      (send-email-after-generation t)
      (email-subject-template "Your Invoice #{invoice_number}")
      (email-body-template
        "Dear {customer_name},\n\nPlease find your invoice attached.\nThank you for your business!")
      (cc-email-addresses ())
      (attach-invoice-as-pdf t))

    (invoice-customer-settings
      (allow-customer-specific-discounts t)
      (customer-default-tax-rate 8.5)
      (notify-customer-before-due-date t)
      (notify-customer-via-whatsapp t)
      (default-due-date "7 days from invoice generation"))

    (invoice-discounts-and-tax-settings
      (default-discount
        (enable t)
        (rate 10)
        (description "Loyalty Discount"))
      (default-tax
        (enable t)
        (tax-rates
          ((name "Sales Tax") (rate 8.5))
          ((name "Service Tax") (rate 12.0)))))

    (invoice-sharing-settings
      (enable-whatsapp-button t)
      (enable-live-links t)
      (live-link-expiration-days 30)
      (qr-code-settings
        (enable t)
        (size "150px"))
      (enable-social-sharing-buttons t))

    (live-invoice-settings
      (allow-live-edits nil)
      (password-protect-links t)
      (enable-live-tracking t)
      (notify-on-link-access t))

    (invoice-pdf-settings
      (optimize-pdf-for-size t)
      (add-password-protection nil)
      (embed-company-logo-in-pdf t)
      (pdf-footer-text "Generated by {company_name} - {date}"))

    (security-settings
      (allow-invoice-deletion nil)
      (allow-invoice-edit-after-generation t)
      (auto-logout-timer 30)
      (two-factor-authentication t))

    (advanced-settings
      (enable-custom-scripting nil)
      (allow-third-party-integrations t)
      (webhook-urls
        "https://api.example.com/webhook1"
        "https://api.example.com/webhook2")
      (api-keys
        (public-key "abcd1234")
        (private-key "xyz9876")))

    (notification-and-alert-settings
      (enable-push-notifications t)
      (enable-sms-notifications t)
      (sms-template "Invoice {invoice_number} has been created successfully.")
      (email-notification-on-payment t)
      (reminder-email-template
        "Hi {customer_name},\n\nThis is a friendly reminder that your invoice is due on {due_date}.\nThank you for your prompt payment."))))


(defun update-config (config section key new-value)
  "Update a specific KEY in SECTION of config*invoice-settings* to NEW-VALUE."
  (let ((section-list (assoc section config)))
    (when section-list
      (setf (cdr (assoc key section-list)) new-value))))
